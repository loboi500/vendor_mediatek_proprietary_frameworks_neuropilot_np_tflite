// Copyright (C) 2017 The Android Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package {
    // See: http://go/android-license-faq
    // A large-scale-change added 'default_applicable_licenses' to import
    // all of the 'license_kinds' from "external_tensorflow_license"
    // to get the below license kinds:
    //   SPDX-license-identifier-Apache-2.0
    //   SPDX-license-identifier-MIT
    default_applicable_licenses: ["external_tensorflow_license_mtk"],
}

cc_defaults {
    name: "tflite_defaults_mtk",
    vendor_available: true,
    header_libs: [
        "tensorflow_headers_mtk",
    ],
    cflags: [
        "-DTF_LITE_DISABLE_X86_NEON",
        "-Wall",
        "-Werror",
        "-Wextra",
        "-Wno-unused-parameter",
        "-Wno-sign-compare",
        "-Wno-unused-function",
        "-fexceptions",
    ],
    shared_libs: [
        "liblog",
    ],
}

cc_library_static {
    name: "libtflite_context_mtk",
    defaults: ["tflite_defaults_mtk"],
    srcs: ["c/common.c"],
    cflags: [
        "-Wno-typedef-redefinition",
        "-Wno-visibility",
    ],
}

cc_library_static {
    name: "libtflite_framework_mtk",
    defaults: ["tflite_defaults_mtk"],
    rtti: true,
    srcs: [
        "allocation.cc",
        "arena_planner.cc",
        "core/api/error_reporter.cc",
        "core/api/flatbuffer_conversions.cc",
        "core/api/op_resolver.cc",
        "core/api/tensor_utils.cc",
        "core/subgraph.cc",
        "delegates/nnapi/nnapi_delegate.cc",
        "delegates/nnapi/quant_lstm_sup.cc",
        "experimental/resource/resource_variable.cc",
        "external_cpu_backend_context.cc",
        "graph_info.cc",
        "interpreter.cc",
        "interpreter_builder.cc",
        "kernels/cpu_backend_context.cc",
        "kernels/cpu_backend_gemm_eigen.cc",
        "kernels/eigen_support.cc",
        "minimal_logging.cc",
        "minimal_logging_android.cc",
        "mmap_allocation.cc",
        "model_builder.cc",
        "mutable_op_resolver.cc",
        "nnapi/nnapi_implementation.cc",
        "nnapi/nnapi_util.cc",
        "optional_debug_tools.cc",
        "profiling/atrace_profiler.cc",
        "profiling/platform_profiler.cc",
        "schema/schema_utils.cc",
        "simple_memory_arena.cc",
        "stderr_reporter.cc",
        "string_util.cc",
        "tflite_with_xnnpack_optional.cc",
        "tools/optimize/sparsity/format_converter.cc",
        "util.cc",
        "experimental/delegates/neuron/neuron_delegate.cc",
        "experimental/delegates/neuron/neuron_delegate_kernel.cc",
        "experimental/delegates/neuron/neuron_delegate_validation.cc",
        "experimental/delegates/neuron/neuron_implementation.cc",
        "experimental/delegates/neuron/ion/ion.c",
        "delegates/utils/simple_delegate.cc",
        "delegates/utils.cc",
    ],
    include_dirs: [
        "external/libtextclassifier/native/",
    ],
    whole_static_libs: [
        "libtextclassifier_hash_static",
        "libdmabufheap",
        "libion",
        "libbase",
    ],
    header_libs: [
        "flatbuffer_headers",
        "gemmlowp_headers",
        "libbase_headers",
        "libeigen_mtk",
        "libruy_headers",
    ],
    shared_libs: [
        "libnativewindow",
        "libcutils",
    ],
    static_libs: [
        "libarect",
    ],
    cflags: [
        "-DNAMESPACE_FOR_HASH_FUNCTIONS=farmhash",
        "-Wno-deprecated-declarations",
        "-Wno-extern-c-compat",
        "-Wno-ignored-attributes",
        "-Wno-invalid-partial-specialization",
        "-Wno-mismatched-tags",
        "-Wno-sign-compare",
        "-Wno-unused-const-variable",
        "-Wno-unused-function",
        "-Wno-unused-lambda-capture",
        "-Wno-sign-compare",
        "-Wno-unused-variable",
        "-Wno-missing-field-initializers",
        "-Wno-unused-private-field",
    ],
}

cc_library_static {
    name: "libtflite_experimental_acceleration",
    defaults: ["tflite_gpu_delegate_defaults_mtk"],
    rtti: true,
    srcs: [
        "experimental/acceleration/compatibility/android_info.cc",
    ],
    header_libs: [
        "libgpu_delegate_absl_headers",
    ],
}

cc_library_shared {
    name: "libtflite_mtk",
    defaults: ["tflite_defaults_mtk"],
    shared_libs: [
        "libflatbuffers-cpp",
        "libruy",
        "libtextclassifier_hash",
        "libnativewindow",
    ],
    whole_static_libs: [
        "libtflite_context_mtk",
        "libtflite_framework_mtk",
        "libtflite_kernels_mtk",
        "libtflite_mtk_np_ext",
        "libtflite_mtk_np_ext_utils",
        "libtflite_mtk_np_c_api",
        "libtflite_gpu_delegate",
    ],
    stl: "libc++_static",
}

cc_library_shared {
    name: "libtflite_mtk.mtk",
    defaults: ["tflite_defaults_mtk"],
    system_ext_specific: true,
    srcs: [
        "java/src/main/native/*.cc",
        "create_op_resolver_with_builtin_ops.cc",
    ],
    header_libs: [
        "flatbuffer_headers",
        "jni_headers",
    ],
    shared_libs: [
        "libflatbuffers-cpp",
        "libruy",
        "libtextclassifier_hash",
        "libnativewindow",
    ],
    whole_static_libs: [
        "libtflite_context_mtk",
        "libtflite_framework_mtk",
        "libtflite_kernels_mtk",
        "libtflite_mtk_np_ext",
        "libtflite_mtk_np_ext_utils",
        "libtflite_mtk_np_c_api",
        "libtflite_gpu_delegate",
    ],
    stl: "libc++_static",
}

build = [
    "tflite_static.bp",
    "tflite_np_jni.bp",
]
